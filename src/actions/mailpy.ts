import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
// import { RootState, AppThunk } from "../app/store";
import { Condition, Entry, Group } from "mailpy-common";
import MailpyController from "../controllers/mailpy";

export interface MailpyState {
  entries: Entry[];
  groups: Group[];
  // group: ?Group;
  // entry: ?Entry;
  conditions: Condition[];
  status: string;
}

const initialState: MailpyState = {
  entries: [],
  groups: [],
  conditions: [],
  status: "",
  //  group: null,
  //  entry: null,
};
/*
export const insertGroup = createAsyncThunk("mailpy/insertGroup", async (group: Group) => {
  return await MailpyController.insertGroup(group);
});
*/
export const fetchGroups = createAsyncThunk("mailpy/fetchGroups", async () => {
  return await MailpyController.getGroups();
});

export const fetchEntries = createAsyncThunk("mailpy/fetchEntries", async () => {
  return await MailpyController.getEntries();
});

export const fetchConditions = createAsyncThunk("mailpy/fetchConditions", async () => {
  return await MailpyController.getConditions();
});

export const mailpySlice = createSlice({
  name: "mailpy",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setGroup: (state, action: PayloadAction<Group[]>) => {
      state.groups = action.payload;
    },
    setEntries: (state, action: PayloadAction<Entry[]>) => {
      state.entries = action.payload;
    },
    setConditions: (state, action: PayloadAction<Condition[]>) => {
      state.conditions = action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /*
      .addCase(insertGroup.fulfilled, (state, action) => {
        state.status = "sucess";
        state.group = action.payload;
      })
      */
      .addCase(fetchGroups.rejected, (state) => {
        state.status = "failure";
      })
      .addCase(fetchGroups.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchGroups.fulfilled, (state, action) => {
        state.status = "idle";
        state.groups = action.payload;
      })
      .addCase(fetchConditions.fulfilled, (state, action) => {
        state.status = "idle";
        state.conditions = action.payload;
      })
      .addCase(fetchEntries.rejected, (state) => {
        state.status = "failure";
      })
      .addCase(fetchEntries.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEntries.fulfilled, (state, action) => {
        state.status = "idle";
        state.entries = action.payload;
      });
  },
});

export const { setConditions, setEntries, setGroup } = mailpySlice.actions;
// export const { increment, decrement, incrementByAmount } = mailpySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };
*/
export default mailpySlice.reducer;
