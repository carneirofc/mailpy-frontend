import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
// import { RootState, AppThunk } from "../app/store";
import { Condition, Entry, Event, Group } from "mailpy-common";
import MailpyController from "../controllers/mailpy";

/* We omit 'ts' because the default value is a Date type, we need imutable representations */
export interface EventImutable extends Omit<Event, "ts"> {
  ts: string;
}

export interface MailpyState {
  entries: Entry[];
  groups: Group[];
  events: EventImutable[];
  conditions: Condition[];
  status: string;
}

const initialState: MailpyState = {
  entries: [],
  groups: [],
  events: [],
  conditions: [],
  status: "",
};

export const fetchEvents = createAsyncThunk("mailpy/fetchEvents", async () => {
  const events = await MailpyController.getEvents();
  return events.map((e) => ({ ...e, ts: e.ts.toString() }));
});

export const fetchGroups = createAsyncThunk("mailpy/fetchGroups", async () => {
  return await MailpyController.getGroups();
});

export const fetchEntries = createAsyncThunk("mailpy/fetchEntries", async () => {
  return await MailpyController.getEntries();
});

export const fetchConditions = createAsyncThunk("mailpy/fetchConditions", async () => {
  return await MailpyController.getConditions();
});

export const mailpySlice = createSlice({
  name: "mailpy",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setGroup: (state, action: PayloadAction<Group[]>) => {
      state.groups = action.payload;
    },
    setEntries: (state, action: PayloadAction<Entry[]>) => {
      state.entries = action.payload;
    },
    setConditions: (state, action: PayloadAction<Condition[]>) => {
      state.conditions = action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchEvents.rejected, (state) => {
        state.status = "failure";
      })
      .addCase(fetchEvents.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEvents.fulfilled, (state, action) => {
        state.status = "idle";
        state.events = action.payload;
      })
      .addCase(fetchGroups.rejected, (state) => {
        state.status = "failure";
      })
      .addCase(fetchGroups.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchGroups.fulfilled, (state, action) => {
        state.status = "idle";
        state.groups = action.payload;
      })
      .addCase(fetchConditions.fulfilled, (state, action) => {
        state.status = "idle";
        state.conditions = action.payload;
      })
      .addCase(fetchEntries.rejected, (state) => {
        state.status = "failure";
      })
      .addCase(fetchEntries.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEntries.fulfilled, (state, action) => {
        state.status = "idle";
        state.entries = action.payload;
      });
  },
});

export const { setConditions, setEntries, setGroup } = mailpySlice.actions;

export default mailpySlice.reducer;
